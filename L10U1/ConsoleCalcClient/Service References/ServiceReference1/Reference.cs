//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleCalcClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MyCalculator", Namespace="http://schemas.datacontract.org/2004/07/L10U1")]
    [System.SerializableAttribute()]
    public partial class MyCalculator : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float param1Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private float param2Field;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float param1 {
            get {
                return this.param1Field;
            }
            set {
                if ((this.param1Field.Equals(value) != true)) {
                    this.param1Field = value;
                    this.RaisePropertyChanged("param1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public float param2 {
            get {
                return this.param2Field;
            }
            set {
                if ((this.param2Field.Equals(value) != true)) {
                    this.param2Field = value;
                    this.RaisePropertyChanged("param2");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.ICalculator")]
    public interface ICalculator {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        float Addition(ConsoleCalcClient.ServiceReference1.MyCalculator input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Addition", ReplyAction="http://tempuri.org/ICalculator/AdditionResponse")]
        System.Threading.Tasks.Task<float> AdditionAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtraction", ReplyAction="http://tempuri.org/ICalculator/SubtractionResponse")]
        float Subtraction(ConsoleCalcClient.ServiceReference1.MyCalculator input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Subtraction", ReplyAction="http://tempuri.org/ICalculator/SubtractionResponse")]
        System.Threading.Tasks.Task<float> SubtractionAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        float Multiply(ConsoleCalcClient.ServiceReference1.MyCalculator input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Multiply", ReplyAction="http://tempuri.org/ICalculator/MultiplyResponse")]
        System.Threading.Tasks.Task<float> MultiplyAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        float Divide(ConsoleCalcClient.ServiceReference1.MyCalculator input);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ICalculator/Divide", ReplyAction="http://tempuri.org/ICalculator/DivideResponse")]
        System.Threading.Tasks.Task<float> DivideAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ICalculatorChannel : ConsoleCalcClient.ServiceReference1.ICalculator, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculatorClient : System.ServiceModel.ClientBase<ConsoleCalcClient.ServiceReference1.ICalculator>, ConsoleCalcClient.ServiceReference1.ICalculator {
        
        public CalculatorClient() {
        }
        
        public CalculatorClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public CalculatorClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public CalculatorClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public float Addition(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.Addition(input);
        }
        
        public System.Threading.Tasks.Task<float> AdditionAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.AdditionAsync(input);
        }
        
        public float Subtraction(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.Subtraction(input);
        }
        
        public System.Threading.Tasks.Task<float> SubtractionAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.SubtractionAsync(input);
        }
        
        public float Multiply(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.Multiply(input);
        }
        
        public System.Threading.Tasks.Task<float> MultiplyAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.MultiplyAsync(input);
        }
        
        public float Divide(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.Divide(input);
        }
        
        public System.Threading.Tasks.Task<float> DivideAsync(ConsoleCalcClient.ServiceReference1.MyCalculator input) {
            return base.Channel.DivideAsync(input);
        }
    }
}
